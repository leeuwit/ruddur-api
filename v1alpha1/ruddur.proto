syntax = "proto3";

package v1alpha1;

option go_package = "github.com/leeuwit/ruddur-api/v1alpha1";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  schemes: HTTPS;
  host: "cloud.ruddur.dev";
  consumes: "application/json";
  produces: "application/json";
  info: {
    title: "Ruddur API";
    version: "v1alpha1";
  }
  security_definitions: {
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "https://auth.ruddur.dev/auth";
        token_url: "https://auth.ruddur.dev/token";
        scopes: {
          scope: {
            key: "openid";
            value: "Returns the sub claim, which uniquely identifies the user. In an ID Token, iss, aud, exp, iat, and at_hash claims will also be present.";
          }
          scope: {
            key: "profile";
            value: "Returns claims that represent basic profile information, including name, family_name, given_name, middle_name, nickname, picture, and updated_at.";
          }
          scope: {
            key: "email";
            value: "Returns the email claim, which contains the user's email address, and email_verified, which is a boolean indicating whether the email address was verified by the user.";
          }
          scope: {
            key: "offline_access";
            value: "Returns a refresh_token which allows offline access.";
          }
          scope: {
            key: "viewer";
            value: "View most resources";
          }
          scope: {
            key: "editor";
            value: "View, create, update, and delete most resources";
          }
          scope: {
            key: "owner";
            value: "Full access to most resources";
          }
        }
      }
    }
  }
  security : {
    security_requirement: {
      key: "OAuth2"
      value: {
        scope: "viewer";
      }
    }
  }
};

// The project service definition.
service Projects {
  rpc List(google.protobuf.Empty) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get: "/v1/projects"
    };
  };
  rpc Create(CreateProjectRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/projects"
      body: "*"
    };
  };
  rpc ListUsers(ListUsersForProjectRequest) returns (ListUsersForProjectResponse) {
    option (google.api.http) = {
      get: "/v1/projects/{name}/users"
    };
  };
  rpc AuthorizeUser(AuthorizeUserForProjectRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/projects/{name}/authorize"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "OAuth2";
          value: {
            scope: "owner";
          }
        }
      }
    };
  };
  rpc RevokeUser(RevokeUserForProjectRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/projects/{name}/revoke"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "OAuth2";
          value: {
            scope: "owner";
          }
        }
      }
    };
  };
}

message ListProjectsResponse {
  // Names of the projects.
  repeated string name = 1;
}

message CreateProjectRequest {
  // Name of the project.
  string name = 1;
}

message ListUsersForProjectRequest {
  // Name of the project.
  string name = 1;
}

message UserAndRole {
  string user = 1;
  string role = 2;
}

message ListUsersForProjectResponse {
  // Name of the project.
  string name = 1;
  // Authorized users.
  repeated UserAndRole users = 2;
}

message AuthorizeUserForProjectRequest {
  // Name of the project.
  string name = 1;
  // User to authorize.
  string user = 2;
  // New role of user.
  string role = 3;
}

message RevokeUserForProjectRequest {
  // Name of the project.
  string name = 1;
  // User to revoke.
  string user = 2;
}

// The machines service definition.
service Machines {
  rpc ListTypes(google.protobuf.Empty) returns (MachineTypesResponse) {
    option (google.api.http) = {
      get: "/v1/machines/types"
    };
  };
  rpc ListAvailable(google.protobuf.Empty) returns (AvailableMachinesResponse) {
    option (google.api.http) = {
      get: "/v1/machines/available"
    };
  };
}

message MachineTypeAndAmount {
  string type = 1;
  int32 amount = 2;
}

message MachineTypesResponse {
  repeated string types = 1;
}

message AvailableMachinesResponse {
  repeated MachineTypeAndAmount machines = 1;
}

// The clusters service definition.
service Clusters {
  rpc List(ListClustersRequest) returns (ListClustersResponse) {
    option (google.api.http) = {
      get: "/v1/projects/{project}/clusters"
    };
  };
  rpc Create(CreateClusterRequest) returns (CreateClusterResponse){
    option (google.api.http) = {
      post: "/v1/projects/{project}/clusters"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "OAuth2";
          value: {
            scope: "editor";
          }
        }
      }
    };
  };

  // TODO: EditCluster (extend / shrink)

  rpc Delete(DeleteClusterRequest) returns (DeleteClusterResponse){
    option (google.api.http) = {
      delete: "/v1/projects/{project}/clusters/{name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "OAuth2";
          value: {
            scope: "editor";
          }
        }
      }
    };
  };
  rpc Kubeconfig(KubeconfigRequest) returns (KubeconfigResponse){
    option (google.api.http) = {
      get: "/v1/projects/{project}/clusters/{name}/kubeconfig"
    };
  };
}

message ListClustersResponse {
  repeated Cluster clusters = 1;
}

message Cluster {
  string name = 1;
  string status = 2;
  string url = 3;
}

message ListClustersRequest {
  string project = 1;
}

message CreateClusterRequest {
  string project = 1;
  string name = 2;
  MachineTypeAndAmount control_plane_nodes = 3;
  repeated MachineTypeAndAmount worker_nodes = 4;
}

message CreateClusterResponse {
  string status = 1;
  string message = 2;
  string url = 3;
}

message DeleteClusterRequest {
  string project = 1;
  string name = 2;
}

message DeleteClusterResponse {
  string status = 1;
  string message = 2;
}

message KubeconfigRequest {
  string project = 1;
  string name = 2;
}

message KubeconfigResponse {
  bytes kubeconfig = 1;
}

// The virtual machines service definition.
service VirtualMachines {
  rpc ListTypes(google.protobuf.Empty) returns (VirtualMachineTypesResponse) {
    option (google.api.http) = {
      get: "/v1/vms/types"
    };
  };
  rpc ListOperatingSystems(google.protobuf.Empty) returns (VirtualMachineOperatingSystemsResponse) {
    option (google.api.http) = {
      get: "/v1/vms/operatingsystems"
    };
  };
  rpc List(ListVirtualMachinesRequest) returns (ListVirtualMachinesResponse) {
    option (google.api.http) = {
      get: "/v1/projects/{project}/vms"
    };
  };
  rpc Create(CreateVirtualMachineRequest) returns (CreateVirtualMachineResponse){
    option (google.api.http) = {
      post: "/v1/projects/{project}/vms"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "OAuth2";
          value: {
            scope: "editor";
          }
        }
      }
    };
  };
  rpc Delete(DeleteVirtualMachineRequest) returns (DeleteVirtualMachineResponse){
    option (google.api.http) = {
      delete: "/v1/projects/{project}/vms/{name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "OAuth2";
          value: {
            scope: "editor";
          }
        }
      }
    };
  };
  rpc OpenStream(stream Chunk) returns (stream Chunk);
}

message VirtualMachineTypesResponse {
  repeated string types = 1;
}

message VirtualMachineOperatingSystemsResponse {
  repeated string operatingSystems = 1;
}

message ListVirtualMachinesResponse {
  repeated VirtualMachine vms = 1;
}

message VirtualMachine {
  string name = 1;
  string status = 2;
}

message ListVirtualMachinesRequest {
  string project = 1;
}

message CreateVirtualMachineRequest {
  string project = 1;
  string name = 2;
  string operatingSystem = 3;
  string machineType = 4;
}

message CreateVirtualMachineResponse {
  string status = 1;
  string message = 2;
}

message DeleteVirtualMachineRequest {
  string project = 1;
  string name = 2;
}

message DeleteVirtualMachineResponse {
  string status = 1;
  string message = 2;
}

message Chunk {
  bytes chunk = 1;
}

message SerialStream {
  string project = 1;
  string name = 2;
}

message VncStream {
  string project = 1;
  string name = 2;
}
