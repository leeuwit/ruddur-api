syntax = "proto3";

package cluster;

option go_package = "github.com/leeuwit/ruddur/api/cluster";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// The project service definition.
service ProjectService {
  rpc ListProjects(google.protobuf.Empty) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get: "/v1/projects"
    };
  };
  rpc CreateProject(CreateProjectRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/projects"
      body: "*"
    };
  };
  rpc AuthorizeUser(AuthorizeUserForProjectRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/projects/{project}/authorize/{user}"
    };
  };
  rpc RevokeUser(RevokeUserForProjectRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/projects/{project}/revoke/{user}"
    };
  };
}

message ListProjectsResponse {
  // Names of the projects.
  repeated string name = 1;
}

message CreateProjectRequest {
  // Name of the project.
  string name = 1;
}

message AuthorizeUserForProjectRequest {
  // Name of the project.
  string project = 1;
  // User to authorize.
  string user = 2;
}

message RevokeUserForProjectRequest {
  // Name of the project.
  string project = 1;
  // User to revoke.
  string user = 2;
}

// The cluster service definition.
service ClusterService {
  rpc ListMachineTypes(google.protobuf.Empty) returns (MachineTypesResponse) {
    option (google.api.http) = {
      get: "/v1/machines/types"
    };
  };
  rpc ListAvailableMachines(google.protobuf.Empty) returns (AvailableMachinesResponse) {
    option (google.api.http) = {
      get: "/v1/machines/available"
    };
  };
  rpc ListClusters(ListClustersRequest) returns (ListClustersResponse) {
    option (google.api.http) = {
      get: "/v1/projects/{project}/clusters"
    };
  };
  rpc CreateCluster(CreateClusterRequest) returns (CreateClusterResponse){
    option (google.api.http) = {
      post: "/v1/projects/{project}/clusters"
      body: "*"
    };
  };

  // TODO: EditCluster (extend / shrink)

  rpc DeleteCluster(DeleteClusterRequest) returns (DeleteClusterResponse){
    option (google.api.http) = {
      delete: "/v1/projects/{project}/clusters/{name}"
    };
  };
  rpc Kubeconfig(KubeconfigRequest) returns (KubeconfigResponse){
    option (google.api.http) = {
      get: "/v1/projects/{project}/clusters/{name}/kubeconfig"
    };
  };
}

message MachineTypesResponse {
  repeated string types = 1;
}

message AvailableMachinesResponse {
  repeated MachineTypeAndAmount machines = 1;
}

message ListClustersResponse {
  repeated Cluster clusters = 1;
}

message Cluster {
  string name = 1;
  string status = 2;
  string url = 3;
}

message ListClustersRequest {
  string project = 1;
}

message CreateClusterRequest {
  string project = 1;
  string name = 2;
  MachineTypeAndAmount control_plane_nodes = 3;
  repeated MachineTypeAndAmount worker_nodes = 4;
}

message CreateClusterResponse {
  string status = 1;
  string message = 2;
  string url = 3;
}

message DeleteClusterRequest {
  string project = 1;
  string name = 2;
}

message DeleteClusterResponse {
  string status = 1;
  string message = 2;
}

message MachineTypeAndAmount {
  string type = 1;
  int32 amount = 2;
}

message KubeconfigRequest {
  string project = 1;
  string name = 2;
}

message KubeconfigResponse {
  bytes kubeconfig = 1;
}

// The virtual machine service definition.
service VirtualMachineService {
  rpc ListVirtualMachineTypes(google.protobuf.Empty) returns (VirtualMachineTypesResponse) {
    option (google.api.http) = {
      get: "/v1/vms/types"
    };
  };
  rpc ListVirtualMachineOperatingSystems(google.protobuf.Empty) returns (VirtualMachineOperatingSystemsResponse) {
    option (google.api.http) = {
      get: "/v1/vms/operatingsystems"
    };
  };
  rpc ListVirtualMachines(ListVirtualMachinesRequest) returns (ListVirtualMachinesResponse) {
    option (google.api.http) = {
      get: "/v1/projects/{project}/vms"
    };
  };
  rpc CreateVirtualMachine(CreateVirtualMachineRequest) returns (CreateVirtualMachineResponse){
    option (google.api.http) = {
      post: "/v1/projects/{project}/vms"
      body: "*"
    };
  };
  rpc DeleteVirtualMachine(DeleteVirtualMachineRequest) returns (DeleteVirtualMachineResponse){
    option (google.api.http) = {
      delete: "/v1/projects/{project}/vms/{name}"
    };
  };
  rpc OpenStream(stream Chunk) returns (stream Chunk);
}

message VirtualMachineTypesResponse {
  repeated string types = 1;
}

message VirtualMachineOperatingSystemsResponse {
  repeated string operatingSystems = 1;
}

message ListVirtualMachinesResponse {
  repeated VirtualMachine vms = 1;
}

message VirtualMachine {
  string name = 1;
  string status = 2;
}

message ListVirtualMachinesRequest {
  string project = 1;
}

message CreateVirtualMachineRequest {
  string project = 1;
  string name = 2;
  string operatingSystem = 3;
  string machineType = 4;
}

message CreateVirtualMachineResponse {
  string status = 1;
  string message = 2;
}

message DeleteVirtualMachineRequest {
  string project = 1;
  string name = 2;
}

message DeleteVirtualMachineResponse {
  string status = 1;
  string message = 2;
}

message Chunk {
  bytes chunk = 1;
}

message SerialStream {
  string project = 1;
  string name = 2;
}

message VncStream {
  string project = 1;
  string name = 2;
}
