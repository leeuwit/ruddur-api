// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cluster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	ListProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AuthorizeUser(ctx context.Context, in *AuthorizeUserForProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RevokeUser(ctx context.Context, in *RevokeUserForProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) ListProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/cluster.ProjectService/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cluster.ProjectService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AuthorizeUser(ctx context.Context, in *AuthorizeUserForProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cluster.ProjectService/AuthorizeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RevokeUser(ctx context.Context, in *RevokeUserForProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cluster.ProjectService/RevokeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	ListProjects(context.Context, *emptypb.Empty) (*ListProjectsResponse, error)
	CreateProject(context.Context, *CreateProjectRequest) (*emptypb.Empty, error)
	AuthorizeUser(context.Context, *AuthorizeUserForProjectRequest) (*emptypb.Empty, error)
	RevokeUser(context.Context, *RevokeUserForProjectRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) ListProjects(context.Context, *emptypb.Empty) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedProjectServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) AuthorizeUser(context.Context, *AuthorizeUserForProjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeUser not implemented")
}
func (UnimplementedProjectServiceServer) RevokeUser(context.Context, *RevokeUserForProjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeUser not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ProjectService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListProjects(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ProjectService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AuthorizeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeUserForProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AuthorizeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ProjectService/AuthorizeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AuthorizeUser(ctx, req.(*AuthorizeUserForProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RevokeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUserForProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RevokeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ProjectService/RevokeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RevokeUser(ctx, req.(*RevokeUserForProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjects",
			Handler:    _ProjectService_ListProjects_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "AuthorizeUser",
			Handler:    _ProjectService_AuthorizeUser_Handler,
		},
		{
			MethodName: "RevokeUser",
			Handler:    _ProjectService_RevokeUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ruddur.proto",
}

// ClusterServiceClient is the client API for ClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterServiceClient interface {
	ListMachineTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MachineTypesResponse, error)
	ListAvailableMachines(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableMachinesResponse, error)
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterResponse, error)
	DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*DeleteClusterResponse, error)
	Kubeconfig(ctx context.Context, in *KubeconfigRequest, opts ...grpc.CallOption) (*KubeconfigResponse, error)
}

type clusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterServiceClient(cc grpc.ClientConnInterface) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) ListMachineTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MachineTypesResponse, error) {
	out := new(MachineTypesResponse)
	err := c.cc.Invoke(ctx, "/cluster.ClusterService/ListMachineTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListAvailableMachines(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableMachinesResponse, error) {
	out := new(AvailableMachinesResponse)
	err := c.cc.Invoke(ctx, "/cluster.ClusterService/ListAvailableMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, "/cluster.ClusterService/ListClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterResponse, error) {
	out := new(CreateClusterResponse)
	err := c.cc.Invoke(ctx, "/cluster.ClusterService/CreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*DeleteClusterResponse, error) {
	out := new(DeleteClusterResponse)
	err := c.cc.Invoke(ctx, "/cluster.ClusterService/DeleteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Kubeconfig(ctx context.Context, in *KubeconfigRequest, opts ...grpc.CallOption) (*KubeconfigResponse, error) {
	out := new(KubeconfigResponse)
	err := c.cc.Invoke(ctx, "/cluster.ClusterService/Kubeconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServiceServer is the server API for ClusterService service.
// All implementations must embed UnimplementedClusterServiceServer
// for forward compatibility
type ClusterServiceServer interface {
	ListMachineTypes(context.Context, *emptypb.Empty) (*MachineTypesResponse, error)
	ListAvailableMachines(context.Context, *emptypb.Empty) (*AvailableMachinesResponse, error)
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	CreateCluster(context.Context, *CreateClusterRequest) (*CreateClusterResponse, error)
	DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error)
	Kubeconfig(context.Context, *KubeconfigRequest) (*KubeconfigResponse, error)
	mustEmbedUnimplementedClusterServiceServer()
}

// UnimplementedClusterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClusterServiceServer struct {
}

func (UnimplementedClusterServiceServer) ListMachineTypes(context.Context, *emptypb.Empty) (*MachineTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachineTypes not implemented")
}
func (UnimplementedClusterServiceServer) ListAvailableMachines(context.Context, *emptypb.Empty) (*AvailableMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableMachines not implemented")
}
func (UnimplementedClusterServiceServer) ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedClusterServiceServer) CreateCluster(context.Context, *CreateClusterRequest) (*CreateClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedClusterServiceServer) DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedClusterServiceServer) Kubeconfig(context.Context, *KubeconfigRequest) (*KubeconfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kubeconfig not implemented")
}
func (UnimplementedClusterServiceServer) mustEmbedUnimplementedClusterServiceServer() {}

// UnsafeClusterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServiceServer will
// result in compilation errors.
type UnsafeClusterServiceServer interface {
	mustEmbedUnimplementedClusterServiceServer()
}

func RegisterClusterServiceServer(s grpc.ServiceRegistrar, srv ClusterServiceServer) {
	s.RegisterService(&ClusterService_ServiceDesc, srv)
}

func _ClusterService_ListMachineTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListMachineTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/ListMachineTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListMachineTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListAvailableMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListAvailableMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/ListAvailableMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListAvailableMachines(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/ListClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).DeleteCluster(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Kubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KubeconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Kubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/Kubeconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Kubeconfig(ctx, req.(*KubeconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterService_ServiceDesc is the grpc.ServiceDesc for ClusterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMachineTypes",
			Handler:    _ClusterService_ListMachineTypes_Handler,
		},
		{
			MethodName: "ListAvailableMachines",
			Handler:    _ClusterService_ListAvailableMachines_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _ClusterService_ListClusters_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _ClusterService_CreateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _ClusterService_DeleteCluster_Handler,
		},
		{
			MethodName: "Kubeconfig",
			Handler:    _ClusterService_Kubeconfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ruddur.proto",
}

// VirtualMachineServiceClient is the client API for VirtualMachineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtualMachineServiceClient interface {
	ListVirtualMachineTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VirtualMachineTypesResponse, error)
	ListVirtualMachineOperatingSystems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VirtualMachineOperatingSystemsResponse, error)
	ListVirtualMachines(ctx context.Context, in *ListVirtualMachinesRequest, opts ...grpc.CallOption) (*ListVirtualMachinesResponse, error)
	CreateVirtualMachine(ctx context.Context, in *CreateVirtualMachineRequest, opts ...grpc.CallOption) (*CreateVirtualMachineResponse, error)
	DeleteVirtualMachine(ctx context.Context, in *DeleteVirtualMachineRequest, opts ...grpc.CallOption) (*DeleteVirtualMachineResponse, error)
	OpenStream(ctx context.Context, opts ...grpc.CallOption) (VirtualMachineService_OpenStreamClient, error)
}

type virtualMachineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualMachineServiceClient(cc grpc.ClientConnInterface) VirtualMachineServiceClient {
	return &virtualMachineServiceClient{cc}
}

func (c *virtualMachineServiceClient) ListVirtualMachineTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VirtualMachineTypesResponse, error) {
	out := new(VirtualMachineTypesResponse)
	err := c.cc.Invoke(ctx, "/cluster.VirtualMachineService/ListVirtualMachineTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) ListVirtualMachineOperatingSystems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VirtualMachineOperatingSystemsResponse, error) {
	out := new(VirtualMachineOperatingSystemsResponse)
	err := c.cc.Invoke(ctx, "/cluster.VirtualMachineService/ListVirtualMachineOperatingSystems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) ListVirtualMachines(ctx context.Context, in *ListVirtualMachinesRequest, opts ...grpc.CallOption) (*ListVirtualMachinesResponse, error) {
	out := new(ListVirtualMachinesResponse)
	err := c.cc.Invoke(ctx, "/cluster.VirtualMachineService/ListVirtualMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) CreateVirtualMachine(ctx context.Context, in *CreateVirtualMachineRequest, opts ...grpc.CallOption) (*CreateVirtualMachineResponse, error) {
	out := new(CreateVirtualMachineResponse)
	err := c.cc.Invoke(ctx, "/cluster.VirtualMachineService/CreateVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) DeleteVirtualMachine(ctx context.Context, in *DeleteVirtualMachineRequest, opts ...grpc.CallOption) (*DeleteVirtualMachineResponse, error) {
	out := new(DeleteVirtualMachineResponse)
	err := c.cc.Invoke(ctx, "/cluster.VirtualMachineService/DeleteVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) OpenStream(ctx context.Context, opts ...grpc.CallOption) (VirtualMachineService_OpenStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &VirtualMachineService_ServiceDesc.Streams[0], "/cluster.VirtualMachineService/OpenStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &virtualMachineServiceOpenStreamClient{stream}
	return x, nil
}

type VirtualMachineService_OpenStreamClient interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type virtualMachineServiceOpenStreamClient struct {
	grpc.ClientStream
}

func (x *virtualMachineServiceOpenStreamClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *virtualMachineServiceOpenStreamClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VirtualMachineServiceServer is the server API for VirtualMachineService service.
// All implementations must embed UnimplementedVirtualMachineServiceServer
// for forward compatibility
type VirtualMachineServiceServer interface {
	ListVirtualMachineTypes(context.Context, *emptypb.Empty) (*VirtualMachineTypesResponse, error)
	ListVirtualMachineOperatingSystems(context.Context, *emptypb.Empty) (*VirtualMachineOperatingSystemsResponse, error)
	ListVirtualMachines(context.Context, *ListVirtualMachinesRequest) (*ListVirtualMachinesResponse, error)
	CreateVirtualMachine(context.Context, *CreateVirtualMachineRequest) (*CreateVirtualMachineResponse, error)
	DeleteVirtualMachine(context.Context, *DeleteVirtualMachineRequest) (*DeleteVirtualMachineResponse, error)
	OpenStream(VirtualMachineService_OpenStreamServer) error
	mustEmbedUnimplementedVirtualMachineServiceServer()
}

// UnimplementedVirtualMachineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVirtualMachineServiceServer struct {
}

func (UnimplementedVirtualMachineServiceServer) ListVirtualMachineTypes(context.Context, *emptypb.Empty) (*VirtualMachineTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualMachineTypes not implemented")
}
func (UnimplementedVirtualMachineServiceServer) ListVirtualMachineOperatingSystems(context.Context, *emptypb.Empty) (*VirtualMachineOperatingSystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualMachineOperatingSystems not implemented")
}
func (UnimplementedVirtualMachineServiceServer) ListVirtualMachines(context.Context, *ListVirtualMachinesRequest) (*ListVirtualMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualMachines not implemented")
}
func (UnimplementedVirtualMachineServiceServer) CreateVirtualMachine(context.Context, *CreateVirtualMachineRequest) (*CreateVirtualMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualMachine not implemented")
}
func (UnimplementedVirtualMachineServiceServer) DeleteVirtualMachine(context.Context, *DeleteVirtualMachineRequest) (*DeleteVirtualMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualMachine not implemented")
}
func (UnimplementedVirtualMachineServiceServer) OpenStream(VirtualMachineService_OpenStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenStream not implemented")
}
func (UnimplementedVirtualMachineServiceServer) mustEmbedUnimplementedVirtualMachineServiceServer() {}

// UnsafeVirtualMachineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualMachineServiceServer will
// result in compilation errors.
type UnsafeVirtualMachineServiceServer interface {
	mustEmbedUnimplementedVirtualMachineServiceServer()
}

func RegisterVirtualMachineServiceServer(s grpc.ServiceRegistrar, srv VirtualMachineServiceServer) {
	s.RegisterService(&VirtualMachineService_ServiceDesc, srv)
}

func _VirtualMachineService_ListVirtualMachineTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).ListVirtualMachineTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.VirtualMachineService/ListVirtualMachineTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).ListVirtualMachineTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_ListVirtualMachineOperatingSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).ListVirtualMachineOperatingSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.VirtualMachineService/ListVirtualMachineOperatingSystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).ListVirtualMachineOperatingSystems(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_ListVirtualMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVirtualMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).ListVirtualMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.VirtualMachineService/ListVirtualMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).ListVirtualMachines(ctx, req.(*ListVirtualMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_CreateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).CreateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.VirtualMachineService/CreateVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).CreateVirtualMachine(ctx, req.(*CreateVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_DeleteVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).DeleteVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.VirtualMachineService/DeleteVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).DeleteVirtualMachine(ctx, req.(*DeleteVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_OpenStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VirtualMachineServiceServer).OpenStream(&virtualMachineServiceOpenStreamServer{stream})
}

type VirtualMachineService_OpenStreamServer interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type virtualMachineServiceOpenStreamServer struct {
	grpc.ServerStream
}

func (x *virtualMachineServiceOpenStreamServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *virtualMachineServiceOpenStreamServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VirtualMachineService_ServiceDesc is the grpc.ServiceDesc for VirtualMachineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualMachineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.VirtualMachineService",
	HandlerType: (*VirtualMachineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVirtualMachineTypes",
			Handler:    _VirtualMachineService_ListVirtualMachineTypes_Handler,
		},
		{
			MethodName: "ListVirtualMachineOperatingSystems",
			Handler:    _VirtualMachineService_ListVirtualMachineOperatingSystems_Handler,
		},
		{
			MethodName: "ListVirtualMachines",
			Handler:    _VirtualMachineService_ListVirtualMachines_Handler,
		},
		{
			MethodName: "CreateVirtualMachine",
			Handler:    _VirtualMachineService_CreateVirtualMachine_Handler,
		},
		{
			MethodName: "DeleteVirtualMachine",
			Handler:    _VirtualMachineService_DeleteVirtualMachine_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenStream",
			Handler:       _VirtualMachineService_OpenStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ruddur.proto",
}
