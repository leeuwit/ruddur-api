// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: ruddur/v1/clusters.proto

package ruddurv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Url    string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruddur_v1_clusters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_ruddur_v1_clusters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_ruddur_v1_clusters_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Cluster) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ClusterVirtualMachine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu     string `protobuf:"bytes,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory  string `protobuf:"bytes,5,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage string `protobuf:"bytes,6,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *ClusterVirtualMachine) Reset() {
	*x = ClusterVirtualMachine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruddur_v1_clusters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterVirtualMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterVirtualMachine) ProtoMessage() {}

func (x *ClusterVirtualMachine) ProtoReflect() protoreflect.Message {
	mi := &file_ruddur_v1_clusters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterVirtualMachine.ProtoReflect.Descriptor instead.
func (*ClusterVirtualMachine) Descriptor() ([]byte, []int) {
	return file_ruddur_v1_clusters_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterVirtualMachine) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *ClusterVirtualMachine) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *ClusterVirtualMachine) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

type ClusterMachineSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Machine:
	//
	//	*ClusterMachineSet_Type
	//	*ClusterMachineSet_Virtual
	Machine isClusterMachineSet_Machine `protobuf_oneof:"machine"`
	Amount  int32                       `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ClusterMachineSet) Reset() {
	*x = ClusterMachineSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruddur_v1_clusters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMachineSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMachineSet) ProtoMessage() {}

func (x *ClusterMachineSet) ProtoReflect() protoreflect.Message {
	mi := &file_ruddur_v1_clusters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMachineSet.ProtoReflect.Descriptor instead.
func (*ClusterMachineSet) Descriptor() ([]byte, []int) {
	return file_ruddur_v1_clusters_proto_rawDescGZIP(), []int{2}
}

func (m *ClusterMachineSet) GetMachine() isClusterMachineSet_Machine {
	if m != nil {
		return m.Machine
	}
	return nil
}

func (x *ClusterMachineSet) GetType() string {
	if x, ok := x.GetMachine().(*ClusterMachineSet_Type); ok {
		return x.Type
	}
	return ""
}

func (x *ClusterMachineSet) GetVirtual() *ClusterVirtualMachine {
	if x, ok := x.GetMachine().(*ClusterMachineSet_Virtual); ok {
		return x.Virtual
	}
	return nil
}

func (x *ClusterMachineSet) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type isClusterMachineSet_Machine interface {
	isClusterMachineSet_Machine()
}

type ClusterMachineSet_Type struct {
	Type string `protobuf:"bytes,1,opt,name=type,proto3,oneof"`
}

type ClusterMachineSet_Virtual struct {
	Virtual *ClusterVirtualMachine `protobuf:"bytes,2,opt,name=virtual,proto3,oneof"`
}

func (*ClusterMachineSet_Type) isClusterMachineSet_Machine() {}

func (*ClusterMachineSet_Virtual) isClusterMachineSet_Machine() {}

type ClusterServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ClusterServiceListRequest) Reset() {
	*x = ClusterServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruddur_v1_clusters_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceListRequest) ProtoMessage() {}

func (x *ClusterServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ruddur_v1_clusters_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceListRequest.ProtoReflect.Descriptor instead.
func (*ClusterServiceListRequest) Descriptor() ([]byte, []int) {
	return file_ruddur_v1_clusters_proto_rawDescGZIP(), []int{3}
}

func (x *ClusterServiceListRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type ClusterServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ClusterServiceListResponse) Reset() {
	*x = ClusterServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruddur_v1_clusters_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceListResponse) ProtoMessage() {}

func (x *ClusterServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ruddur_v1_clusters_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceListResponse.ProtoReflect.Descriptor instead.
func (*ClusterServiceListResponse) Descriptor() ([]byte, []int) {
	return file_ruddur_v1_clusters_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterServiceListResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type ClusterServiceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project           string               `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Name              string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ControlPlaneNodes *ClusterMachineSet   `protobuf:"bytes,3,opt,name=control_plane_nodes,json=controlPlaneNodes,proto3" json:"control_plane_nodes,omitempty"`
	WorkerNodes       []*ClusterMachineSet `protobuf:"bytes,4,rep,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes,omitempty"`
}

func (x *ClusterServiceCreateRequest) Reset() {
	*x = ClusterServiceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruddur_v1_clusters_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceCreateRequest) ProtoMessage() {}

func (x *ClusterServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ruddur_v1_clusters_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*ClusterServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_ruddur_v1_clusters_proto_rawDescGZIP(), []int{5}
}

func (x *ClusterServiceCreateRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ClusterServiceCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterServiceCreateRequest) GetControlPlaneNodes() *ClusterMachineSet {
	if x != nil {
		return x.ControlPlaneNodes
	}
	return nil
}

func (x *ClusterServiceCreateRequest) GetWorkerNodes() []*ClusterMachineSet {
	if x != nil {
		return x.WorkerNodes
	}
	return nil
}

type ClusterServiceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Url     string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ClusterServiceCreateResponse) Reset() {
	*x = ClusterServiceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruddur_v1_clusters_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceCreateResponse) ProtoMessage() {}

func (x *ClusterServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ruddur_v1_clusters_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*ClusterServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_ruddur_v1_clusters_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterServiceCreateResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterServiceCreateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ClusterServiceCreateResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ClusterServiceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ClusterServiceDeleteRequest) Reset() {
	*x = ClusterServiceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruddur_v1_clusters_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceDeleteRequest) ProtoMessage() {}

func (x *ClusterServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ruddur_v1_clusters_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*ClusterServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_ruddur_v1_clusters_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterServiceDeleteRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ClusterServiceDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ClusterServiceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterServiceDeleteResponse) Reset() {
	*x = ClusterServiceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruddur_v1_clusters_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceDeleteResponse) ProtoMessage() {}

func (x *ClusterServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ruddur_v1_clusters_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*ClusterServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_ruddur_v1_clusters_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterServiceDeleteResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterServiceDeleteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ClusterServiceKubeconfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ClusterServiceKubeconfigRequest) Reset() {
	*x = ClusterServiceKubeconfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruddur_v1_clusters_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterServiceKubeconfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceKubeconfigRequest) ProtoMessage() {}

func (x *ClusterServiceKubeconfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ruddur_v1_clusters_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceKubeconfigRequest.ProtoReflect.Descriptor instead.
func (*ClusterServiceKubeconfigRequest) Descriptor() ([]byte, []int) {
	return file_ruddur_v1_clusters_proto_rawDescGZIP(), []int{9}
}

func (x *ClusterServiceKubeconfigRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ClusterServiceKubeconfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ClusterServiceKubeconfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kubeconfig []byte `protobuf:"bytes,1,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
}

func (x *ClusterServiceKubeconfigResponse) Reset() {
	*x = ClusterServiceKubeconfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ruddur_v1_clusters_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterServiceKubeconfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceKubeconfigResponse) ProtoMessage() {}

func (x *ClusterServiceKubeconfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ruddur_v1_clusters_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceKubeconfigResponse.ProtoReflect.Descriptor instead.
func (*ClusterServiceKubeconfigResponse) Descriptor() ([]byte, []int) {
	return file_ruddur_v1_clusters_proto_rawDescGZIP(), []int{10}
}

func (x *ClusterServiceKubeconfigResponse) GetKubeconfig() []byte {
	if x != nil {
		return x.Kubeconfig
	}
	return nil
}

var File_ruddur_v1_clusters_proto protoreflect.FileDescriptor

var file_ruddur_v1_clusters_proto_rawDesc = []byte{
	0x0a, 0x18, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x72, 0x75, 0x64, 0x64,
	0x75, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x5b, 0x0a, 0x15,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x07, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0x35, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x4c, 0x0a,
	0x1a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x1b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x1c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x4b, 0x0a, 0x1b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x1c, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x20,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x32, 0xbb, 0x04, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x72, 0x75,
	0x64, 0x64, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x2e, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x72, 0x75, 0x64,
	0x64, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x86, 0x01, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x72, 0x75, 0x64, 0x64, 0x75,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x95,
	0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2e, 0x76, 0x31,
	0x42, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65,
	0x65, 0x75, 0x77, 0x69, 0x74, 0x2f, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x75, 0x64, 0x64, 0x75, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x75, 0x64, 0x64, 0x75,
	0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x52, 0x75, 0x64, 0x64,
	0x75, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09, 0x52, 0x75, 0x64, 0x64, 0x75, 0x72, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x15, 0x52, 0x75, 0x64, 0x64, 0x75, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x52, 0x75, 0x64, 0x64,
	0x75, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ruddur_v1_clusters_proto_rawDescOnce sync.Once
	file_ruddur_v1_clusters_proto_rawDescData = file_ruddur_v1_clusters_proto_rawDesc
)

func file_ruddur_v1_clusters_proto_rawDescGZIP() []byte {
	file_ruddur_v1_clusters_proto_rawDescOnce.Do(func() {
		file_ruddur_v1_clusters_proto_rawDescData = protoimpl.X.CompressGZIP(file_ruddur_v1_clusters_proto_rawDescData)
	})
	return file_ruddur_v1_clusters_proto_rawDescData
}

var file_ruddur_v1_clusters_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_ruddur_v1_clusters_proto_goTypes = []interface{}{
	(*Cluster)(nil),                          // 0: ruddur.v1.Cluster
	(*ClusterVirtualMachine)(nil),            // 1: ruddur.v1.ClusterVirtualMachine
	(*ClusterMachineSet)(nil),                // 2: ruddur.v1.ClusterMachineSet
	(*ClusterServiceListRequest)(nil),        // 3: ruddur.v1.ClusterServiceListRequest
	(*ClusterServiceListResponse)(nil),       // 4: ruddur.v1.ClusterServiceListResponse
	(*ClusterServiceCreateRequest)(nil),      // 5: ruddur.v1.ClusterServiceCreateRequest
	(*ClusterServiceCreateResponse)(nil),     // 6: ruddur.v1.ClusterServiceCreateResponse
	(*ClusterServiceDeleteRequest)(nil),      // 7: ruddur.v1.ClusterServiceDeleteRequest
	(*ClusterServiceDeleteResponse)(nil),     // 8: ruddur.v1.ClusterServiceDeleteResponse
	(*ClusterServiceKubeconfigRequest)(nil),  // 9: ruddur.v1.ClusterServiceKubeconfigRequest
	(*ClusterServiceKubeconfigResponse)(nil), // 10: ruddur.v1.ClusterServiceKubeconfigResponse
}
var file_ruddur_v1_clusters_proto_depIdxs = []int32{
	1,  // 0: ruddur.v1.ClusterMachineSet.virtual:type_name -> ruddur.v1.ClusterVirtualMachine
	0,  // 1: ruddur.v1.ClusterServiceListResponse.clusters:type_name -> ruddur.v1.Cluster
	2,  // 2: ruddur.v1.ClusterServiceCreateRequest.control_plane_nodes:type_name -> ruddur.v1.ClusterMachineSet
	2,  // 3: ruddur.v1.ClusterServiceCreateRequest.worker_nodes:type_name -> ruddur.v1.ClusterMachineSet
	3,  // 4: ruddur.v1.ClusterService.List:input_type -> ruddur.v1.ClusterServiceListRequest
	5,  // 5: ruddur.v1.ClusterService.Create:input_type -> ruddur.v1.ClusterServiceCreateRequest
	7,  // 6: ruddur.v1.ClusterService.Delete:input_type -> ruddur.v1.ClusterServiceDeleteRequest
	9,  // 7: ruddur.v1.ClusterService.Kubeconfig:input_type -> ruddur.v1.ClusterServiceKubeconfigRequest
	4,  // 8: ruddur.v1.ClusterService.List:output_type -> ruddur.v1.ClusterServiceListResponse
	6,  // 9: ruddur.v1.ClusterService.Create:output_type -> ruddur.v1.ClusterServiceCreateResponse
	8,  // 10: ruddur.v1.ClusterService.Delete:output_type -> ruddur.v1.ClusterServiceDeleteResponse
	10, // 11: ruddur.v1.ClusterService.Kubeconfig:output_type -> ruddur.v1.ClusterServiceKubeconfigResponse
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_ruddur_v1_clusters_proto_init() }
func file_ruddur_v1_clusters_proto_init() {
	if File_ruddur_v1_clusters_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ruddur_v1_clusters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruddur_v1_clusters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterVirtualMachine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruddur_v1_clusters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMachineSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruddur_v1_clusters_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruddur_v1_clusters_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruddur_v1_clusters_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterServiceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruddur_v1_clusters_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterServiceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruddur_v1_clusters_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterServiceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruddur_v1_clusters_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterServiceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruddur_v1_clusters_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterServiceKubeconfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ruddur_v1_clusters_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterServiceKubeconfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ruddur_v1_clusters_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ClusterMachineSet_Type)(nil),
		(*ClusterMachineSet_Virtual)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ruddur_v1_clusters_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ruddur_v1_clusters_proto_goTypes,
		DependencyIndexes: file_ruddur_v1_clusters_proto_depIdxs,
		MessageInfos:      file_ruddur_v1_clusters_proto_msgTypes,
	}.Build()
	File_ruddur_v1_clusters_proto = out.File
	file_ruddur_v1_clusters_proto_rawDesc = nil
	file_ruddur_v1_clusters_proto_goTypes = nil
	file_ruddur_v1_clusters_proto_depIdxs = nil
}
