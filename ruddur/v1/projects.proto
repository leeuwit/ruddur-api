syntax = "proto3";

package ruddur.v1;

import "google/api/annotations.proto";

// The project service definition.
service ProjectService {
  rpc List(ProjectServiceListRequest) returns (ProjectServiceListResponse) {
    option (google.api.http) = {
      post: "/ruddur.v1.ProjectService/List"
      body: "*"
    };
  };
  rpc Get(ProjectServiceGetRequest) returns (ProjectServiceGetResponse) {
    option (google.api.http) = {
      post: "/ruddur.v1.ProjectService/Get"
      body: "*"
    };
  };
  rpc Register(ProjectServiceRegisterRequest) returns (ProjectServiceRegisterResponse) {
    option (google.api.http) = {
      post: "/ruddur.v1.ProjectService/Register"
      body: "*"
    };
  };
  rpc Create(ProjectServiceCreateRequest) returns (ProjectServiceCreateResponse) {
    option (google.api.http) = {
      post: "/ruddur.v1.ProjectService/Create"
      body: "*"
    };
  };
  rpc Delete(ProjectServiceDeleteRequest) returns (ProjectServiceDeleteResponse) {
    option (google.api.http) = {
      post: "/ruddur.v1.ProjectService/Delete"
      body: "*"
    };
  };
  rpc Authorize(ProjectServiceAuthorizeRequest) returns (ProjectServiceAuthorizeResponse) {
    option (google.api.http) = {
      post: "/ruddur.v1.ProjectService/Authorize"
      body: "*"
    };
  };
  rpc Revoke(ProjectServiceRevokeRequest) returns (ProjectServiceRevokeResponse) {
    option (google.api.http) = {
      post: "/ruddur.v1.ProjectService/Revoke"
      body: "*"
    };
  };
}

message ProjectServiceListRequest {
}

message ProjectServiceListResponse {
  // Names of the projects.
  repeated string name = 1;
}

message EmailAndRole {
  string email = 1;
  string role = 2;
}

message DomainAndRole {
  string domain = 1;
  string role = 2;
}

message ProjectServiceGetRequest {
  // Name of the project.
  string name = 1;
}

message ProjectServiceGetResponse {
  // Name of the project.
  string name = 1;
  // Authorized emails.
  repeated EmailAndRole emails = 2;
}

message ProjectServiceRegisterRequest {
  // Name of the project, also used as the subdomain.
  string name = 1;
  // First name of contact person.
  string first_name = 2;
  // Last name of contact person.
  string last_name = 3;
  // Email address of contact person.
  string email = 4;
  // Company, optional.
  string company = 5;
}

message ProjectServiceRegisterResponse {
}

message ProjectServiceCreateRequest {
  // Name of the project.
  string name = 1;
}

message ProjectServiceCreateResponse {
}

message ProjectServiceDeleteRequest {
  // Name of the project.
  string name = 1;
}

message ProjectServiceDeleteResponse {
}

message ProjectServiceAuthorizeRequest {
  // Name of the project.
  string name = 1;
  // Email to authorize, can be a wildcard.
  // Example to authorize a single user: john.doe@example.com
  // Example to authorize all users in a domain: @example.com
  string email = 2;
  // Role to authorize.
  string role = 3;
}

message ProjectServiceAuthorizeResponse {
}

message ProjectServiceRevokeRequest {
  // Name of the project.
  string name = 1;
  // Email to authorize, can be a wildcard.
  string email = 2;
}

message ProjectServiceRevokeResponse {
}
