// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ruddur/v1/virtualmachines.proto

package ruddurv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/leeuwit/ruddur-api/ruddur/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// VirtualMachineServiceName is the fully-qualified name of the VirtualMachineService service.
	VirtualMachineServiceName = "ruddur.v1.VirtualMachineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VirtualMachineServiceGetProcedure is the fully-qualified name of the VirtualMachineService's Get
	// RPC.
	VirtualMachineServiceGetProcedure = "/ruddur.v1.VirtualMachineService/Get"
	// VirtualMachineServiceListProcedure is the fully-qualified name of the VirtualMachineService's
	// List RPC.
	VirtualMachineServiceListProcedure = "/ruddur.v1.VirtualMachineService/List"
	// VirtualMachineServiceCreateProcedure is the fully-qualified name of the VirtualMachineService's
	// Create RPC.
	VirtualMachineServiceCreateProcedure = "/ruddur.v1.VirtualMachineService/Create"
	// VirtualMachineServiceDeleteProcedure is the fully-qualified name of the VirtualMachineService's
	// Delete RPC.
	VirtualMachineServiceDeleteProcedure = "/ruddur.v1.VirtualMachineService/Delete"
)

// VirtualMachineServiceClient is a client for the ruddur.v1.VirtualMachineService service.
type VirtualMachineServiceClient interface {
	Get(context.Context, *connect_go.Request[v1.VirtualMachineServiceGetRequest]) (*connect_go.ServerStreamForClient[v1.VirtualMachineServiceGetResponse], error)
	List(context.Context, *connect_go.Request[v1.VirtualMachineServiceListRequest]) (*connect_go.Response[v1.VirtualMachineServiceListResponse], error)
	Create(context.Context, *connect_go.Request[v1.VirtualMachineServiceCreateRequest]) (*connect_go.Response[v1.VirtualMachineServiceCreateResponse], error)
	Delete(context.Context, *connect_go.Request[v1.VirtualMachineServiceDeleteRequest]) (*connect_go.Response[v1.VirtualMachineServiceDeleteResponse], error)
}

// NewVirtualMachineServiceClient constructs a client for the ruddur.v1.VirtualMachineService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVirtualMachineServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VirtualMachineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &virtualMachineServiceClient{
		get: connect_go.NewClient[v1.VirtualMachineServiceGetRequest, v1.VirtualMachineServiceGetResponse](
			httpClient,
			baseURL+VirtualMachineServiceGetProcedure,
			opts...,
		),
		list: connect_go.NewClient[v1.VirtualMachineServiceListRequest, v1.VirtualMachineServiceListResponse](
			httpClient,
			baseURL+VirtualMachineServiceListProcedure,
			opts...,
		),
		create: connect_go.NewClient[v1.VirtualMachineServiceCreateRequest, v1.VirtualMachineServiceCreateResponse](
			httpClient,
			baseURL+VirtualMachineServiceCreateProcedure,
			opts...,
		),
		delete: connect_go.NewClient[v1.VirtualMachineServiceDeleteRequest, v1.VirtualMachineServiceDeleteResponse](
			httpClient,
			baseURL+VirtualMachineServiceDeleteProcedure,
			opts...,
		),
	}
}

// virtualMachineServiceClient implements VirtualMachineServiceClient.
type virtualMachineServiceClient struct {
	get    *connect_go.Client[v1.VirtualMachineServiceGetRequest, v1.VirtualMachineServiceGetResponse]
	list   *connect_go.Client[v1.VirtualMachineServiceListRequest, v1.VirtualMachineServiceListResponse]
	create *connect_go.Client[v1.VirtualMachineServiceCreateRequest, v1.VirtualMachineServiceCreateResponse]
	delete *connect_go.Client[v1.VirtualMachineServiceDeleteRequest, v1.VirtualMachineServiceDeleteResponse]
}

// Get calls ruddur.v1.VirtualMachineService.Get.
func (c *virtualMachineServiceClient) Get(ctx context.Context, req *connect_go.Request[v1.VirtualMachineServiceGetRequest]) (*connect_go.ServerStreamForClient[v1.VirtualMachineServiceGetResponse], error) {
	return c.get.CallServerStream(ctx, req)
}

// List calls ruddur.v1.VirtualMachineService.List.
func (c *virtualMachineServiceClient) List(ctx context.Context, req *connect_go.Request[v1.VirtualMachineServiceListRequest]) (*connect_go.Response[v1.VirtualMachineServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Create calls ruddur.v1.VirtualMachineService.Create.
func (c *virtualMachineServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.VirtualMachineServiceCreateRequest]) (*connect_go.Response[v1.VirtualMachineServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Delete calls ruddur.v1.VirtualMachineService.Delete.
func (c *virtualMachineServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.VirtualMachineServiceDeleteRequest]) (*connect_go.Response[v1.VirtualMachineServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// VirtualMachineServiceHandler is an implementation of the ruddur.v1.VirtualMachineService service.
type VirtualMachineServiceHandler interface {
	Get(context.Context, *connect_go.Request[v1.VirtualMachineServiceGetRequest], *connect_go.ServerStream[v1.VirtualMachineServiceGetResponse]) error
	List(context.Context, *connect_go.Request[v1.VirtualMachineServiceListRequest]) (*connect_go.Response[v1.VirtualMachineServiceListResponse], error)
	Create(context.Context, *connect_go.Request[v1.VirtualMachineServiceCreateRequest]) (*connect_go.Response[v1.VirtualMachineServiceCreateResponse], error)
	Delete(context.Context, *connect_go.Request[v1.VirtualMachineServiceDeleteRequest]) (*connect_go.Response[v1.VirtualMachineServiceDeleteResponse], error)
}

// NewVirtualMachineServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVirtualMachineServiceHandler(svc VirtualMachineServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(VirtualMachineServiceGetProcedure, connect_go.NewServerStreamHandler(
		VirtualMachineServiceGetProcedure,
		svc.Get,
		opts...,
	))
	mux.Handle(VirtualMachineServiceListProcedure, connect_go.NewUnaryHandler(
		VirtualMachineServiceListProcedure,
		svc.List,
		opts...,
	))
	mux.Handle(VirtualMachineServiceCreateProcedure, connect_go.NewUnaryHandler(
		VirtualMachineServiceCreateProcedure,
		svc.Create,
		opts...,
	))
	mux.Handle(VirtualMachineServiceDeleteProcedure, connect_go.NewUnaryHandler(
		VirtualMachineServiceDeleteProcedure,
		svc.Delete,
		opts...,
	))
	return "/ruddur.v1.VirtualMachineService/", mux
}

// UnimplementedVirtualMachineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVirtualMachineServiceHandler struct{}

func (UnimplementedVirtualMachineServiceHandler) Get(context.Context, *connect_go.Request[v1.VirtualMachineServiceGetRequest], *connect_go.ServerStream[v1.VirtualMachineServiceGetResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ruddur.v1.VirtualMachineService.Get is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) List(context.Context, *connect_go.Request[v1.VirtualMachineServiceListRequest]) (*connect_go.Response[v1.VirtualMachineServiceListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ruddur.v1.VirtualMachineService.List is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) Create(context.Context, *connect_go.Request[v1.VirtualMachineServiceCreateRequest]) (*connect_go.Response[v1.VirtualMachineServiceCreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ruddur.v1.VirtualMachineService.Create is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) Delete(context.Context, *connect_go.Request[v1.VirtualMachineServiceDeleteRequest]) (*connect_go.Response[v1.VirtualMachineServiceDeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ruddur.v1.VirtualMachineService.Delete is not implemented"))
}
