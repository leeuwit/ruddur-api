syntax = "proto3";

package ruddur.v1;

import "google/api/annotations.proto";
import "ruddur/v1/common.proto";

// The clusters service definition.
service ClusterService {
  rpc List(ClusterServiceListRequest) returns (ClusterServiceListResponse) {
    option (google.api.http) = {
      get: "/v1/projects/{project}/clusters"
    };
  };
  rpc Create(ClusterServiceCreateRequest) returns (ClusterServiceCreateResponse) {
    option (google.api.http) = {
      post: "/v1/projects/{project}/clusters"
      body: "*"
    };
  };
  // TODO: Edit (extend / shrink)
  rpc Delete(ClusterServiceDeleteRequest) returns (ClusterServiceDeleteResponse) {
    option (google.api.http) = {
      delete: "/v1/projects/{project}/clusters/{name}"
    };
  };
  rpc Kubeconfig(ClusterServiceKubeconfigRequest) returns (ClusterServiceKubeconfigResponse) {
    option (google.api.http) = {
      get: "/v1/projects/{project}/clusters/{name}/kubeconfig"
    };
  };
}

message Cluster {
  string name = 1;
  string status = 2;
  string url = 3;
}

message ClusterServiceListRequest {
  string project = 1;
}

message ClusterServiceListResponse {
  repeated Cluster clusters = 1;
}

message ClusterServiceCreateRequest {
  string project = 1;
  string name = 2;
  MachineTypeAndAmount control_plane_nodes = 3;
  repeated MachineTypeAndAmount worker_nodes = 4;
}

message ClusterServiceCreateResponse {
  string status = 1;
  string message = 2;
  string url = 3;
}

message ClusterServiceDeleteRequest {
  string project = 1;
  string name = 2;
}

message ClusterServiceDeleteResponse {
  string status = 1;
  string message = 2;
}

message ClusterServiceKubeconfigRequest {
  string project = 1;
  string name = 2;
}

message ClusterServiceKubeconfigResponse {
  bytes kubeconfig = 1;
}
